@page "/create-event"
@using EventEase.Models
@using EventEase.Services
@inject EventService EventService
@inject NavigationManager NavigationManager

<PageTitle>EventEase - Create Event</PageTitle>

<div class="container mt-4">
    <h1>Create New Event</h1>

    <div class="row">
        <div class="col-md-8">
            <EditForm Model="@newEvent" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="name" class="form-label">Event Name</label>
                    <InputText id="name" class="form-control" @bind-Value="newEvent.Name" />
                    <ValidationMessage For="@(() => newEvent.Name)" />
                </div>

                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="newEvent.Description" rows="3" />
                    <ValidationMessage For="@(() => newEvent.Description)" />
                </div>

                <div class="mb-3">
                    <label for="date" class="form-label">Date</label>
                    <input type="date" class="form-control" id="date" @bind="newEvent.Date" min="2020-01-01" />
                    <ValidationMessage For="@(() => newEvent.Date)" />
                </div>

                <div class="mb-3">
                    <label for="location" class="form-label">Location</label>
                    <InputText id="location" class="form-control" @bind-Value="newEvent.Location" />
                    <ValidationMessage For="@(() => newEvent.Location)" />
                </div>

                <div class="mb-3">
                    <label for="price" class="form-label">Price</label>
                    <InputNumber id="price" class="form-control" @bind-Value="newEvent.Price" />
                    <ValidationMessage For="@(() => newEvent.Price)" />
                </div>

                <div class="mb-3">
                    <label for="availableSpots" class="form-label">Available Spots</label>
                    <InputNumber id="availableSpots" class="form-control" @bind-Value="newEvent.AvailableSpots" />
                    <ValidationMessage For="@(() => newEvent.AvailableSpots)" />
                </div>

                <div class="mb-3">
                    <label for="category" class="form-label">Category</label>
                    <InputSelect id="category" class="form-select" @bind-Value="newEvent.Category">
                        <option value="">Select a category</option>
                        <option value="Conference">Conference</option>
                        <option value="Workshop">Workshop</option>
                        <option value="Networking">Networking</option>
                        <option value="Social">Social</option>
                        <option value="Other">Other</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => newEvent.Category)" />
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-primary">Create Event</button>
                    <button type="button" class="btn btn-secondary" @onclick="NavigateToEvents">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private Event newEvent = new();

    private async Task HandleValidSubmit()
    {
        try
        {
            await EventService.CreateEventAsync(newEvent);
            NavigationManager.NavigateTo("/events");
        }
        catch (Exception ex)
        {
            // Handle error (you might want to show an error message to the user)
            Console.WriteLine($"Error creating event: {ex.Message}");
        }
    }

    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/events");
    }
} 