@page "/event/{Id:int}/register"
@using EventEase.Models
@using EventEase.Services
@inject EventService EventService
@inject UserSessionService UserSessionService
@inject AttendanceService AttendanceService
@inject NavigationManager NavigationManager
@inject ILogger<EventRegistration> Logger

<h3>Event Registration</h3>

@if (evt == null)
{
    <p>Loading event details...</p>
}
else
{
    <div class="card">
        <div class="card-body">
            <h4 class="card-title">Register for @evt.Name</h4>
            <div class="card-text mb-4">
                <p><strong>Date:</strong> @evt.Date.ToShortDateString()</p>
                <p><strong>Location:</strong> @evt.Location</p>
                <p><strong>Price:</strong> @evt.Price.ToString("C")</p>
                <p><strong>Available Spots:</strong> @evt.AvailableSpots</p>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            <EditForm Model="@registrationModel" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-3">
                    <label for="name">Full Name</label>
                    <InputText id="name" class="form-control" @bind-Value="registrationModel.FullName" />
                    <ValidationMessage For="@(() => registrationModel.FullName)" />
                </div>

                <div class="form-group mb-3">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registrationModel.Email" />
                    <ValidationMessage For="@(() => registrationModel.Email)" />
                </div>

                <div class="form-group mb-3">
                    <label for="phone">Phone Number</label>
                    <InputText id="phone" class="form-control" @bind-Value="registrationModel.PhoneNumber" />
                    <ValidationMessage For="@(() => registrationModel.PhoneNumber)" />
                </div>

                <div class="form-group mb-3">
                    <label for="password">Password</label>
                    <InputText type="password" id="password" class="form-control" @bind-Value="registrationModel.Password" />
                    <ValidationMessage For="@(() => registrationModel.Password)" />
                </div>

                <div class="form-group mb-3">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText type="password" id="confirmPassword" class="form-control" @bind-Value="registrationModel.ConfirmPassword" />
                    <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
                </div>

                <div class="form-check mb-3">
                    <InputCheckbox class="form-check-input" @bind-Value="registrationModel.TermsAccepted" />
                    <label class="form-check-label" for="terms">
                        I accept the terms and conditions
                    </label>
                </div>

                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" @onclick="NavigateToEventDetails">Back to Event</button>
                    <button type="submit" class="btn btn-primary" disabled="@(!registrationModel.TermsAccepted)">
                        Submit Registration
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Event evt;
    private RegistrationModel registrationModel = new();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            evt = await EventService.GetEventByIdAsync(Id);
            if (evt == null)
            {
                NavigationManager.NavigateTo("/events");
                return;
            }

            // Check if user is already registered
            var session = await UserSessionService.GetCurrentSessionAsync();
            if (session != null && session.RegisteredEventIds.Contains(Id))
            {
                errorMessage = "You are already registered for this event.";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing event registration");
            errorMessage = "An error occurred while loading the event details.";
        }
    }

    private async Task HandleRegistration()
    {
        try
        {
            var session = await UserSessionService.GetCurrentSessionAsync();
            if (session == null)
            {
                // Create new user session
                session = new UserSession
                {
                    UserId = Guid.NewGuid().ToString(),
                    Email = registrationModel.Email,
                    FullName = registrationModel.FullName,
                    Password = registrationModel.Password,
                    LastActivity = DateTime.UtcNow
                };
                await UserSessionService.SetCurrentSessionAsync(session);
            }

            // Register attendance
            await AttendanceService.RegisterAttendanceAsync(Id, session.UserId);

            // Navigate to success page or event details
            NavigationManager.NavigateTo($"/event/{Id}");
        }
        catch (InvalidOperationException ex)
        {
            errorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during registration");
            errorMessage = "An error occurred during registration. Please try again.";
        }
    }

    private void NavigateToEventDetails()
    {
        NavigationManager.NavigateTo($"/event/{Id}");
    }
} 