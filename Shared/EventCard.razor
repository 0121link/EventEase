@using EventEase.Models
@using System.ComponentModel.DataAnnotations

<div class="card h-100">
    <div class="card-body">
        <h5 class="card-title">@Event.Name</h5>
        <p class="card-text">@Event.Description</p>
        <p class="card-text">
            <small class="text-muted">
                Date: @Event.Date.ToShortDateString()<br>
                Location: @Event.Location<br>
                Category: @(!string.IsNullOrEmpty(Event.Category) ? Event.Category : "Uncategorized")<br>
                Price: @Event.Price.ToString("C")<br>
                Available Spots: @Event.AvailableSpots
            </small>
        </p>
        <a href="/event/@Event.Id" class="btn btn-primary">View Details</a>
    </div>
</div>

@code {
    [Parameter]
    public Event Event { get; set; }

    protected override void OnParametersSet()
    {
        if (Event == null)
        {
            throw new ArgumentNullException(nameof(Event), "Event cannot be null");
        }

        // Only validate non-category fields
        var validationContext = new ValidationContext(Event);
        var validationResults = new List<ValidationResult>();
        var propertiesToValidate = typeof(Event).GetProperties()
            .Where(p => p.Name != "Category")
            .Select(p => p.Name);
            
        foreach (var property in propertiesToValidate)
        {
            var context = new ValidationContext(Event) { MemberName = property };
            var results = new List<ValidationResult>();
            if (!Validator.TryValidateProperty(Event.GetType().GetProperty(property).GetValue(Event), context, results))
            {
                validationResults.AddRange(results);
            }
        }

        if (validationResults.Any())
        {
            var errorMessage = string.Join(", ", validationResults.Select(r => r.ErrorMessage));
            throw new ValidationException(errorMessage);
        }
    }
} 